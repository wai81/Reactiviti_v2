{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/error/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/homePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.tsx","app/common/form/MyDateInput.tsx","features/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/error/TestError.tsx","features/error/NotFound.tsx","features/error/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadinInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","selectActivity","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStotre","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","respose","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStote","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","with","fluid","hidden","basic","e","preventDefault","handlerFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","ItemDescription","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","validationScehema","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyle","broder","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","broderColor","PhotoUploadWidget","files","revokeObjectURL","previwe","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","exact","path","HomePage","ActivityDasboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.336126d1.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize =  pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;// 'http://localhost:5000/api/';\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development')\r\n    await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, config, status } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            // if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n            //     store.userStore.logout();\r\n            //     toast.error('Session expired - please login again');\r\n            // }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/from-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date | null;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing:boolean;\r\n    isHost:boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n  \r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain:boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    //activities: Activity[] = [];\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate =  new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            ()=> this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = ( pagingParams: PagingParams) =>{\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () =>{\r\n            this.predicate.forEach((value, key) =>{\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadinInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadinInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadinInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadinInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadinInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    selectActivity = (id: string) => {\r\n        this.selectedActivity = this.activityRegistry.get(id);\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n     updateAttendeeFollowing = (username: string) => {\r\n         this.activityRegistry.forEach(activity => {\r\n             activity.attendees.forEach(attendee => {\r\n                 if (attendee.username === username) {\r\n                     attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                     attendee.following = !attendee.following;\r\n                 }\r\n             })\r\n         })\r\n     }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n    \r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStotre{\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab =>{\r\n                if(activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab =  activeTab;\r\n    }\r\n\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false\r\n    }\r\n\r\n    loadProfile = async (username: string) =>{\r\n        this.loadingProfile = true;\r\n        try{\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() =>{\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) =>{\r\n        this.uploading= true;\r\n        try {\r\n            const respose = await agent.Profiles.uploadPhoto(file);\r\n            const photo = respose.data;\r\n            runInAction(() =>{\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async(photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p=>p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p=>p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async(photo: Photo) => {\r\n        this.loading=true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(()=>{\r\n                if(this.profile){\r\n                    this.profile.photos=this.profile.photos?.filter(p=>p.id !== photo.id);\r\n                    this.loading=false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(()=>this.loading=false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() =>{\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username){\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile =>{\r\n                    if (profile.username === username){\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n            \r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings =  true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings =  false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n    \r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport  default class UserStote {\r\n    user: User| null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user\r\n    }\r\n\r\n    login = async(creds: UserFormValues) =>{\r\n        try{\r\n            const user =  await agent.Account.login(creds)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () =>{\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async() =>{\r\n        try {\r\n            const user =  await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n    register = async(creds:UserFormValues) =>{\r\n        try{\r\n            const user =  await agent.Account.register(creds)\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) =>{\r\n        if(this.user) this.user.image = image;\r\n    }\r\n    \r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import {createContext, useContext} from 'react';\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from './commentStore';\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStotre from './profileStore';\r\nimport UserStote from './userStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStote;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStotre;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore : new CommonStore(),\r\n    userStore: new UserStote(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStotre(),\r\n    commentStore: new CommentStore()\r\n\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function  useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n             () => this.token,\r\n             token => {\r\n                 if (token) {\r\n                     window.localStorage.setItem('jwt', token)\r\n                 } else {\r\n                     window.localStorage.removeItem('jwt')\r\n                 }\r\n             }\r\n         )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () =>{\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                // .withUrl('http://localhost:5000/chat?activityId=' + activityId, {\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right' >\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handlerFollow(e: SyntheticEvent, username: string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n       \r\n         <Reveal animated='move'>\r\n             <Reveal.Content visible style={{ with: '100%' }}>\r\n                 <Button \r\n                     fluid\r\n                     color='teal' \r\n                     content={profile.following ? 'Following' : 'Not following'}\r\n                 />\r\n             </Reveal.Content>\r\n             <Reveal.Content hidden style={{ with: '100%' }}>\r\n                 <Button\r\n                     fluid\r\n                     basic\r\n                     color={profile.following ? 'red' : 'green'}\r\n                     content={profile.following ? 'Unfollow' : 'Follow'}\r\n                     loading={loading}\r\n                     onClick={(e) => handlerFollow(e, profile.username)}\r\n                 />\r\n             </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined){\r\n        if (str){\r\n            return str.length > 40 ? str.substring(0,37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} folowers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style = {attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport React, { } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, ItemDescription, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Canceled' style={{textAlign:'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`} >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hoster by <Link to={`/profiles/${activity.hostUsername}`} >{activity.host?.displayName}</Link> </Item.Description>\r\n                            {activity.isHost && (\r\n                                <ItemDescription>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </ItemDescription>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <ItemDescription>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </ItemDescription>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer(function ActivityDasboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    // if (activityStore.loadingInitial && !loadingNext) return <LoadingComponent content='Loading activities...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n                {/*\r\n                <ActivityList />\r\n                 <Button \r\n                    floated='right'\r\n                    content='More...'\r\n                    positive\r\n                    onClick={handleGetNext}\r\n                    loading={loadingNext}\r\n                    disabled= {pagination?.totalPages === pagination?.currentPage}\r\n                /> */}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or pssword' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' \r\n                        render = {() => \r\n                        <Label style = {{marginBottom: 10}} basic color='red' content = {errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","  \r\nimport React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../error/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema = {Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign Up to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' \r\n                        render = {() => \r\n                        <ValidationErrors errors = {errors.error}/>}\r\n                    />\r\n                    <Button disabled ={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivites\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!); \r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../app/models/activity\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationScehema = Yup.object({\r\n        title: Yup.string().required('The activity titel is requied'),\r\n        description: Yup.string().required('The activity description is requied'),\r\n        category: Yup.string().required(''),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(''),\r\n        city: Yup.string().required(''),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationScehema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color = {activity.isCancelled ? 'green':'red'}\r\n                            floated = 'left'\r\n                            basic\r\n                            content = {activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","\r\nimport { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'Peopel'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username} >\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return() =>clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity = {activity} />\r\n                <ActivityDetailedInfo activity = {activity}/>\r\n                <ActivityDetailedChat activityId = {activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","\r\nimport React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;//'http://localhost:5000/api/'\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n                \r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n}); ","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function  ProfileFollowings() {\r\n    const {profileStore} =  useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={ activeTab===3 ? `People following ${profile?.displayName}`: `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props){\r\n    return(\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio = {1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyle = {\r\n        broder: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        broderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        //console.log(acceptedFiles);\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyle, ...dzActive } : dzStyle}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto:(file: Blob) => void;\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.previwe))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    // <Image src={files[0].preview} />\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading}  onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const {profileStore: {isCurrentUser, uploadPhoto,\r\n            uploading, loading, setMainPhoto, deletePhoto }} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob){\r\n        uploadPhoto(file).then(() =>setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel':'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                        {addPhotoMode ? (\r\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}  />\r\n                        ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading = {target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo,e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic \r\n                                                    color='red' \r\n                                                    icon='trash'\r\n                                                    loading = {target === photo.id && loading}\r\n                                                    onClick = {e => handleDeletePhoto(photo,e)}\r\n                                                    disabled = {photo.isMain}\r\n                                                    name = {photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileConten({profile} : Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: ()=><ProfileAbout />},\r\n        {menuItem: 'Photos', render: ()=><ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: ()=><ProfileActivities />},\r\n        {menuItem: 'Followers', render: ()=><ProfileFollowings />},\r\n        {menuItem: 'Following', render: ()=><ProfileFollowings />},\r\n        \r\n    ]\r\n\r\n    return(\r\n        <Tab \r\n            menu = {{fluid: true, vertical: true}}\r\n            menuPosition = 'right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={ profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileConten from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username}=useParams<{username: string}>();\r\n    const {profileStore}=useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                <>\r\n                <ProfileHeader profile ={profile}/>\r\n                <ProfileConten profile ={profile}/>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps} from \"react-router\";\r\nimport { RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const{userStore: {isLoggedIn}} =useStore();\r\n    return(\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDasboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/homePage';\nimport ActivityForm from '../../features/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/error/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/error/NotFound';\nimport ServerError from '../../features/error/ServerError';\n// import LoginForm from '../../features/users/LoginForm';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDasboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                {/* <Route path='/login' component={LoginForm} /> */}\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history = {history} >\n      <ScrollToTop />\n      <App />,\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}